# coding: utf-8

"""
    Kubeflow Training SDK

    Python SDK for Kubeflow Training  # noqa: E501

    The version of the OpenAPI document: v1.5.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubeflow.training.configuration import Configuration


class KubeflowOrgV1DeepSpeedJobSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deepspeed_replica_specs': 'dict(str, V1ReplicaSpec)',
        'run_policy': 'V1RunPolicy',
        'slots_per_worker': 'int',
        'ssh_auth_mount_path': 'str'
    }

    attribute_map = {
        'deepspeed_replica_specs': 'deepspeedReplicaSpecs',
        'run_policy': 'runPolicy',
        'slots_per_worker': 'slotsPerWorker',
        'ssh_auth_mount_path': 'sshAuthMountPath'
    }

    def __init__(self, deepspeed_replica_specs=None, run_policy=None, slots_per_worker=None, ssh_auth_mount_path=None, local_vars_configuration=None):  # noqa: E501
        """KubeflowOrgV1DeepSpeedJobSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deepspeed_replica_specs = None
        self._run_policy = None
        self._slots_per_worker = None
        self._ssh_auth_mount_path = None
        self.discriminator = None

        self.deepspeed_replica_specs = deepspeed_replica_specs
        if run_policy is not None:
            self.run_policy = run_policy
        if slots_per_worker is not None:
            self.slots_per_worker = slots_per_worker
        if ssh_auth_mount_path is not None:
            self.ssh_auth_mount_path = ssh_auth_mount_path

    @property
    def deepspeed_replica_specs(self):
        """Gets the deepspeed_replica_specs of this KubeflowOrgV1DeepSpeedJobSpec.  # noqa: E501

        DeepSpeedReplicaSpecs contains maps from `DeepSpeedReplicaType` to `ReplicaSpec` that specify the DeepSpeed replicas to run.  # noqa: E501

        :return: The deepspeed_replica_specs of this KubeflowOrgV1DeepSpeedJobSpec.  # noqa: E501
        :rtype: dict(str, V1ReplicaSpec)
        """
        return self._deepspeed_replica_specs

    @deepspeed_replica_specs.setter
    def deepspeed_replica_specs(self, deepspeed_replica_specs):
        """Sets the deepspeed_replica_specs of this KubeflowOrgV1DeepSpeedJobSpec.

        DeepSpeedReplicaSpecs contains maps from `DeepSpeedReplicaType` to `ReplicaSpec` that specify the DeepSpeed replicas to run.  # noqa: E501

        :param deepspeed_replica_specs: The deepspeed_replica_specs of this KubeflowOrgV1DeepSpeedJobSpec.  # noqa: E501
        :type: dict(str, V1ReplicaSpec)
        """
        if self.local_vars_configuration.client_side_validation and deepspeed_replica_specs is None:  # noqa: E501
            raise ValueError("Invalid value for `deepspeed_replica_specs`, must not be `None`")  # noqa: E501

        self._deepspeed_replica_specs = deepspeed_replica_specs

    @property
    def run_policy(self):
        """Gets the run_policy of this KubeflowOrgV1DeepSpeedJobSpec.  # noqa: E501


        :return: The run_policy of this KubeflowOrgV1DeepSpeedJobSpec.  # noqa: E501
        :rtype: V1RunPolicy
        """
        return self._run_policy

    @run_policy.setter
    def run_policy(self, run_policy):
        """Sets the run_policy of this KubeflowOrgV1DeepSpeedJobSpec.


        :param run_policy: The run_policy of this KubeflowOrgV1DeepSpeedJobSpec.  # noqa: E501
        :type: V1RunPolicy
        """

        self._run_policy = run_policy

    @property
    def slots_per_worker(self):
        """Gets the slots_per_worker of this KubeflowOrgV1DeepSpeedJobSpec.  # noqa: E501

        Specifies the number of slots per worker used in hostfile. Defaults to 1.  # noqa: E501

        :return: The slots_per_worker of this KubeflowOrgV1DeepSpeedJobSpec.  # noqa: E501
        :rtype: int
        """
        return self._slots_per_worker

    @slots_per_worker.setter
    def slots_per_worker(self, slots_per_worker):
        """Sets the slots_per_worker of this KubeflowOrgV1DeepSpeedJobSpec.

        Specifies the number of slots per worker used in hostfile. Defaults to 1.  # noqa: E501

        :param slots_per_worker: The slots_per_worker of this KubeflowOrgV1DeepSpeedJobSpec.  # noqa: E501
        :type: int
        """

        self._slots_per_worker = slots_per_worker

    @property
    def ssh_auth_mount_path(self):
        """Gets the ssh_auth_mount_path of this KubeflowOrgV1DeepSpeedJobSpec.  # noqa: E501

        SSHAuthMountPath is the directory where SSH keys are mounted. Defaults to \"/root/.ssh\".  # noqa: E501

        :return: The ssh_auth_mount_path of this KubeflowOrgV1DeepSpeedJobSpec.  # noqa: E501
        :rtype: str
        """
        return self._ssh_auth_mount_path

    @ssh_auth_mount_path.setter
    def ssh_auth_mount_path(self, ssh_auth_mount_path):
        """Sets the ssh_auth_mount_path of this KubeflowOrgV1DeepSpeedJobSpec.

        SSHAuthMountPath is the directory where SSH keys are mounted. Defaults to \"/root/.ssh\".  # noqa: E501

        :param ssh_auth_mount_path: The ssh_auth_mount_path of this KubeflowOrgV1DeepSpeedJobSpec.  # noqa: E501
        :type: str
        """

        self._ssh_auth_mount_path = ssh_auth_mount_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubeflowOrgV1DeepSpeedJobSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubeflowOrgV1DeepSpeedJobSpec):
            return True

        return self.to_dict() != other.to_dict()
